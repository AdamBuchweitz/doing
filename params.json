{"name":"doing","tagline":"A command line tool for remembering what you were doing and tracking what you've done.","body":"_If you're one of the rare people like me who find this useful, feel free to contribute to my [GitTip fund](https://www.gittip.com/ttscoff/) or just [buy me some coffee](http://brettterpstra.com/donate)._\r\n\r\n## What and why\r\n\r\n`doing` is a basic CLI for adding and listing \"what was I doing\" reminders in a [TaskPaper-formatted](http://www.hogbaysoftware.com/products/taskpaper) text file. It allows for multiple sections/categories and flexible output formatting.\r\n\r\nWhile I'm working, I have hourly reminders to record what I'm working on, and I try to remember to punch in quick notes if I'm unexpectedly called away from a project. I can do this just by typing `doing now tracking down the CG bug`. \r\n\r\nIf there's something I want to look at later but doesn't need to be added to a task list or tracker, I can type `doing later check out the pinboard bookmarks from macdrifter`. When I get back to my computer --- or just need a refresher after a distraction --- I can type `doing last` to see what the last thing on my plate was. I can also type `doing recent` (or just `doing`) to get a list of the last few entries. `doing today` gives me everything since midnight for the current day, making it easy to see what I've accomplished over a sleepless night.\r\n\r\n_Side note:_ I actually use the library behind this utility as part of another script that mirrors entries in [Day One](http://dayoneapp.com/) that have the tag \"wwid.\" I can use the hourly writing reminders and enter my stuff in the quick entry popup. Someday I'll get around to cleaning that up and putting it out there.\r\n\r\n## Installation\r\n\r\n    $ [sudo] gem install doing\r\n\r\nOnly use `sudo` if your environment requires it. If you're using the system Ruby on a Mac, for example, it will likely be necessary. If `gem install doing` fails, then run `sudo gem install doing` and provide your administrator password.\r\n\r\nSee the [support](#support) section below for troubleshooting details.\r\n\r\n## The \"doing\" file\r\n\r\nThe file that stores all of your entries is generated the first time you add an entry with `doing now` (or `doing later`). By default the file is created in \"~/what_was_i_doing.md\", but this can be modified in the config file.\r\n\r\nThe format of the \"doing\" file is TaskPaper-compatible. You can edit it by hand at any time (in TaskPaper or any text editor), but it uses a specific format for parsing, so be sure to maintain the dates and pipe characters. \r\n\r\nNotes are anything in the list without a leading hyphen and date. They belong to the entry directly before them, and they should be indented one level beyond the parent item. The `now` and `later` commands don't currently make it possible to add notes at the time of entry creation, but I have scripts that do it and will incorporate them soon.\r\n\r\n## Configuration\r\n\r\nA basic configuration looks like this:\r\n\r\n    ---\r\n    doing_file: /Users/username/Dropbox/nvALT2.2/?? What was I doing.md\r\n    current_section: Currently\r\n    default_template: '%date: %title%note'\r\n    default_date_format: '%Y-%m-%d %H:%M'\r\n    templates:\r\n      default:\r\n        date_format: '%Y-%m-%d %H:%M'\r\n        template: '%date | %title%note'\r\n        wrap_width: 0\r\n      today:\r\n        date_format: '%_I:%M%P'\r\n        template: '%date: %title%odnote'\r\n        wrap_width: 0\r\n      last:\r\n        date_format: '%_I:%M%P on %a'\r\n        template: '%title (at %date)%odnote'\r\n        wrap_width: 0\r\n      recent:\r\n        date_format: '%_I:%M%P'\r\n        template: '%date > %title%odnote'\r\n        wrap_width: 50\r\n    :include_notes: true\r\n\r\n\r\nThe config file is stored in \"~/.doingrc\", and is created on the first run. \r\n\r\n### Doing file location\r\n\r\nThe one thing you'll probably want to adjust is the file that the notes are stored in. That's the `doing_file` key:\r\n\r\n    doing_file: /Users/username/Dropbox/nvALT2.2/?? What was I doing.md\r\n\r\nI keep mine in my nvALT folder for quick access and syncing between machines. If desired, you can give it a `.taskpaper` extension to make it more recognizable to other applications. (If you do that in nvALT, make sure to add `taskpaper` as a recognized extension in preferences).\r\n\r\n### \"Current actions\" section\r\n\r\nYou can rename the section that holds your current tasks. By default, this is \"Currently,\" but if you have some other bright idea, feel free:\r\n\r\n    current_section: Currently\r\n\r\n### Default editors\r\n\r\nThe setting `editor_app` only applies to Mac OS X users. It's the default application that the command `doing open` will open your WWID file in. If this is blank, it will be opened by whatever the system default is, or you can use `-a app_name` or `-b bundle_id` to override.\r\n\r\nIn the case of the `doing now -e` command, your $EDITOR environment variable will be used to complete the entry text and notes. Set it in your .bash_profile or whatever is appropriate for your system:\r\n\r\n    export EDITOR=\"mate -w\"\r\n\r\nThe only requirements are that your editor be launchable from the command line and able to \"wait.\" In the case of Sublime Text and TextMate, just use `-w` like this: `export EDITOR=\"subl -w\"`.\r\n\r\n### Templates\r\n\r\nThe config also contains templates for various command outputs. Include placeholders by placing a % before the keyword. The available tokens are:\r\n\r\n- `%title`: the \"what was I doing\" entry line\r\n- `%date`: the date based on the template's \"date_format\" setting\r\n- `%shortdate`: a custom date formatter that removes the day/month/year from the entry if they match the current day/month/year\r\n- `%note`: Any note in the entry will be included here, a newline and tabs are automatically added.\r\n- `%odnote`: The notes with a leading tab removed (outdented note)\r\n- `%hr`: a horizontal rule (`-`) the width of the terminal\r\n- `%hr_under`: a horizontal rule (`_`) the width of the terminal\r\n- `%[color]`: color can be black, red, green, blue, yellow, magenta, cyan or white\r\n  - you can prefix \"bg\" to affect background colors (%bgyellow)\r\n  - prefix \"bold\" and \"boldbg\" for strong colors (%boldgreen, %boldbgblue)\r\n\r\nDate formats are based on Ruby [strftime](http://www.ruby-doc.org/stdlib-2.1.1/libdoc/date/rdoc/Date.html#method-i-strftime) formatting.\r\n\r\nMy normal template for the `recent` command looks like this:\r\n\r\n    recent:\r\n      date_format: '%_I:%M%P'\r\n      template: '%date > %title%odnote'\r\n      wrap_width: 88\r\n\r\nAnd it outputs:\r\n    \r\n    $ doing recent 3\r\n     4:30am > Made my `console` script smarter...\r\n        Checks first argument to see if it's a file, if it is, that's the log\r\n\r\n        Else, it checks the first argument for a \".log\" suffix and does a search in the user\r\n        application logs with `find` for it.\r\n\r\n        Otherwise, system.log.\r\n\r\n        I also made an awesome Cope wrapper for it...\r\n    12:00pm > Working on `doing` again.\r\n    12:45pm > I think this thing (doing) is ready to document and distribute\r\n    $ \r\n\r\nYou can get pretty clever and include line breaks and other formatting inside of double quotes. If you want multiline templates, just use \"\\n\" in the template line and after the next run it will be rewritten as proper YAML automatically.\r\n\r\nFor example, this block:\r\n\r\n    recent:\r\n      date_format: '%_I:%M%P'\r\n      template: \"\\n%hr\\n%date\\n > %title%odnote\\n%hr_under\"\r\n      wrap_width: 100\r\n\r\nwill rewrite to:\r\n\r\n    recent:\r\n      date_format: '%_I:%M%P'\r\n      template: |2-\r\n\r\n        %hr\r\n        %date\r\n         > %title%odnote\r\n        %hr_under\r\n      wrap_width: 100\r\n\r\nand output my recent entries like this:\r\n\r\n    $ doing recent 3\r\n    -----------------------------------------------------------------------\r\n     4:30am\r\n     > Made my `console` script smarter...\r\n        Checks first argument to see if it's a file, if it is, that's the log\r\n\r\n        Else, it checks the first argument for a \".log\" suffix and does a search in the user application\r\n        logs with `find` for it.\r\n\r\n        Otherwise, system.log.\r\n\r\n        I also made an awesome Cope wrapper for it...\r\n    _______________________________________________________________________\r\n\r\n    -----------------------------------------------------------------------\r\n    12:00pm\r\n     > Working on `doing` again.\r\n    _______________________________________________________________________\r\n\r\n    -----------------------------------------------------------------------\r\n    12:45pm\r\n     > I think this thing (doing) is ready to document and distribute\r\n    _______________________________________________________________________\r\n\r\n    $ \r\n\r\n### Custom views\r\n\r\nYou can create your own \"views\" in the `~/.doingrc` file and view them with `doing view view_name`. Just add a section like this:\r\n\r\n    views:\r\n      old:\r\n        section: Old\r\n        count: 5\r\n        wrap_width: 0\r\n        date_format: '%F %_I:%M%P'\r\n        template: '%date | %title%note' \r\n\r\nYou can add additional custom views, just nest them under the \"views\" key (indented two spaces from the edge). Multiple views would look like this:\r\n\r\n    views:\r\n      later:\r\n        section: Later\r\n        count: 5\r\n        wrap_width: 60\r\n        date_format: '%F %_I:%M%P'\r\n        template: '%date | %title%note'\r\n      old:\r\n        section: Old\r\n        count: 5\r\n        wrap_width: 0\r\n        date_format: '%F %_I:%M%P'\r\n        template: '%date | %title%note' \r\n\r\nThe \"section\" key is the default section to pull entries from. Count and section can be overridden at runtime with the `-c` and `-s` flags.\r\n\r\nYou can add new sections with `done add_section section_name`. You can also create them on the fly by using the `-s section_name` flag when running `doing now`. For example, `doing now -s Misc just a random side note` would create the \"just a random side note\" entry in a new section called \"Misc.\"\r\n\r\nRegarding colors, you can use them to create very nice displays if you're outputting to a color terminal. Example:\r\n\r\n    color:\r\n      date_format: '%F %_I:%M%P'\r\n      section: Currently\r\n      count: 10\r\n      wrap_width: 0\r\n      template: '%boldblack%date %boldgreen| %boldwhite%title%default%note'\r\n\r\nOutputs: \r\n\r\n![](http://ckyp.us/XKpj+)\r\n\r\n## Usage:\r\n\r\n    doing [global options] command [command options] [arguments...]\r\n\r\n### Global options:\r\n\r\n    --[no-]notes        - Output notes if included in the template (default: enabled)\r\n    --version           - Display the program version\r\n    --help              - Show help message and usage summary\r\n\r\n### Commands:\r\n\r\n    help     - Shows a list of commands or help for one command (`doing help now`)\r\n\r\n#### Adding entries:\r\n\r\n    now      - Add an entry\r\n    later    - Add an item to the Later section\r\n    done     - Add an entry tagged with @done(YYYY-mm-dd hh:mm)\r\n\r\n#### Displaying entries:\r\n\r\n    show     - List all entries\r\n    recent   - List recent entries\r\n    today    - List entries from today\r\n    last     - Show the last entry\r\n\r\n#### Sections\r\n\r\n    sections - List sections\r\n    choose   - Select a section to display from a menu\r\n\r\n#### Utilities\r\n\r\n    archive  - Move all but the most recent 5 entries to the Archive section\r\n    config   - Edit the default configuration\r\n\r\n---\r\n\r\n## Troubleshooting\r\n\r\n### Errors after \"Successfully installed...\"\r\n\r\nIf you get errors in the terminal immediately after a message like:\r\n\r\n    Successfully installed doing-x.x.x\r\n    2 gems installed\r\n\r\n...it may just be documentation related. If running `doing` works, you can ignore them. If not, try running the install command again with `--no-document`:\r\n\r\n    $ gem install --no-document doing\r\n\r\n### Command not found\r\n\r\nIf running `doing` after a successful install gives you a \"command not found\" error, then your gem path isn't in your $PATH, meaning the system can't find it. To locate the gem and link it into your path, you can try this:\r\n\r\n    cd $GEM_PATH/bin\r\n    ln -s doing /usr/local/bin/\r\n\r\nThen try running `doing` and see if it works.\r\n\r\n### Encoding errors\r\n\r\nRuby is rife with encoding inconsistencies across platforms and versions. Feel free to file issues (see below).\r\n\r\n### Support\r\n\r\nI'm not making any money on `doing`, and I don't plan to spend a lot of time fixing errors on an array of operating systems and platforms I don't even have access to. You'll probably have to solve some things on your own.\r\n\r\nThat said, you can get support from other users (and occasionally me) on GitHub. If you run into a replicatable issue in your environment, please [post an issue](https://github.com/ttscoff/doing/issues) and include your platform, OS version, and the result of `ruby -v`, along with a copy/paste of the error message.\r\n\r\nPlease try not to email me directly about GitHub projects.\r\n","google":"UA-34296025-1","note":"Don't delete this file! It's used internally to help with page regeneration."}